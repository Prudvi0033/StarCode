generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  username      String        @unique
  createdAt     DateTime      @default(now())
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  codeSnippets  CodeSnippets[]
  comments      Comments[]
  stars         Stars[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CodeSnippets {
  id          String    @id @default(uuid())
  userId      String 
  username    String
  title       String
  code        String
  language    String
  visibility  String    // "public" or "private"
  starsCount  Int       @default(0) 
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comments[]
  stars       Stars[] 
}

model Comments {
  id          String    @id @default(uuid())
  userId      String 
  snippetId   String  
  content     String 
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet     CodeSnippets @relation(fields: [snippetId], references: [id], onDelete: Cascade)
}

model Stars {
  id          String    @id @default(uuid())
  userId      String 
  snippetId   String 
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet     CodeSnippets @relation(fields: [snippetId], references: [id], onDelete: Cascade)
}